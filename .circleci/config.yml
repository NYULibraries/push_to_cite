docker-defaults: &docker-defaults
  docker:
    - image: nyulibraries/circleci_docker:18.06.1-ce-git-compose-1.22.0
      environment:
        - IMAGE_NAME=pushtocite
        - COMPOSE_PROJECT_NAME=pushtocite
  working_directory: ~/app

build_docker: &build_docker
  run:
    name: Build Docker
    command: |
      export BRANCH_NO_SLASH=${CIRCLE_BRANCH//\//_}
      docker-compose build
      docker-compose build -f docker-compose.build.yml

test: &test
  run:
    name: Test
    command: |
      docker-compose run test rspec

auth_dockerhub: &auth_dockerhub
  run:
    name: Authenticate Dockerhub
    command: |
      docker login -u "$DOCKER_USERNAME" --password "$DOCKER_PASSWORD"

pull_docker: &pull_docker
  run:
    name: Pull Docker
    command: |
      export BRANCH_NO_SLASH=${CIRCLE_BRANCH//\//_}
      docker pull nyulibraries/${IMAGE_NAME}:${BRANCH_NO_SLASH} || docker pull nyulibraries/${IMAGE_NAME}:latest

push_docker: &push_docker
  run:
    name: Push Docker
    command: |
      export BRANCH_NO_SLASH=${CIRCLE_BRANCH//\//_}
      docker push nyulibraries/${IMAGE_NAME}:latest
      docker push nyulibraries/${IMAGE_NAME}:${BRANCH_NO_SLASH}
      docker push nyulibraries/${IMAGE_NAME}:${BRANCH_NO_SLASH}-${CIRCLE_SHA1}

version: 2
jobs:
  test-and-build-image:
    <<: *docker-defaults
    steps:
      - checkout
      - setup_remote_docker
      - <<: *auth_dockerhub
      - <<: *pull_docker
      - <<: *build_docker
      - <<: *test
      - run:
          name: Get Junit tests from stopped container
          when: always
          command: docker cp pushtocite_test_run_1:/app/test-results .
      - store_test_results:
          path: ~/app/test-results
      - store_artifacts:
          path: ~/app/test-results
      - <<: *push_docker

  deploy-k8s-dev:
    docker:
      - image: appropriate/curl
    steps:
      - run:
          name: Deploy into staging via Jenkins
          command: |
            export BRANCH_NO_SLASH=${CIRCLE_BRANCH//\//_}
            curl -u $JENKINS_STAGE_USERNAME:$JENKINS_STAGE_API_KEY -X POST https://jenkinsapi-dev.library.nyu.edu/job/PushToCite%20Development%20Deploy/build/api --data-urlencode json="{\"parameter\": [{\"name\":\"TAG\", \"value\":\"${BRANCH_NO_SLASH}-${CIRCLE_SHA1}\"}]}"

  deploy-k8s-prod:
    docker:
      - image: appropriate/curl
    steps:
      - run:
          name: Deploy into staging via Jenkins
          command: |
            export BRANCH_NO_SLASH=${CIRCLE_BRANCH//\//_}
            curl -u $JENKINS_PROD_USERNAME:$JENKINS_PROD_API_KEY -X POST https://jenkinsapi.library.nyu.edu/job/PushToCite%20Production%20Deploy/build/api --data-urlencode json="{\"parameter\": [{\"name\":\"TAG\", \"value\":\"${BRANCH_NO_SLASH}-${CIRCLE_SHA1}\"}]}"

  deploy-dev:
    <<: *docker-defaults
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Deploy to Heroku staging remote on master branch
          command: |
            git push https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_STAGE_APP_NAME.git ${CIRCLE_BRANCH}:master

  deploy-prod:
    <<: *docker-defaults
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Deploy to Heroku production remote on master branch
          command: |
            git push https://heroku:$HEROKU_API_KEY@git.heroku.com/$HEROKU_PROD_APP_NAME.git master

workflows:
  version: 2
  test-and-deploy:
    jobs:
      - test-and-build-image
      - deploy-k8s-dev:
          requires:
            - test-and-build-image
          filters:
            branches:
              ignore:
                - master
      - deploy-k8s-prod:
          requires:
            - test-and-build-image
          filters:
            branches:
              only:
                - master
      - deploy-dev:
          requires:
            - test-and-build-image
          filters:
            branches:
              ignore:
                - master
      - deploy-prod:
          requires:
            - test-and-build-image
          filters:
            branches:
              only: master
